Vamsi Mokkapati
404-464-206
CS 35L, HW 1
TA: Sharath Gopal

1.1

1. 
2. C-s U T F Enter
3. C-s I n s Enter
4. C-s H T M Enter
5. C-x [ C-s a r r o w Enter
6. C-e
7. C-a
8. C-x [
9. No arrow keys.
10. Using C-s to search for words and 
    C-x [ to move to the beginning of the page
    saves many keystrokes.
11. C-x C-c y

1.2

1. 
2. M-g g 1 8 Enter C-k
3. C-s D E L Enter C-a C-k
4. C-s w i k i C-s C-s C-a C-p C-k C-n C-k C-n C-k
5. C-s < ! Enter C-f C-f C-f C-f C-f Backspace Backspace
   Backspace Backspace Backspace Backspace Backspace

1.3

1. 
2. C-x [ M-% A s s i g n m e n t SP 1 Enter
   A s s i g n m e n t SP 3 7 Enter y y n
3. C-x [ M-% U T F - 8 Enter U S - A S C I I Enter y n n
4. C-x [ C-s < o l > Enter Enter
5. C-x C-s C-x C-c

1.4

1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP
   > e x e r 4 . h t m l Enter
2.
3. C-x ] C-r < ! - Enter C-a C-SP C-n M-w M-g g 3 3 6 Enter
   C-y C-k C-p C-f Backspace

4. C-x ] C-r < ! - C-r Enter C-a C-SP C-n C-n C-n M-w M-g g
   2 9 8 Enter C-n C-n C-y C-p C-f Backspace C-p C-f Backspace
   C-p C-f Backspace

   C-x ] C-r < ! - C-r C-r Enter C-a C-SP C-n M-w M-g g 9 1
   Enter C-y C-p C-f Backspace

   C-x ] C-r < ! - C-r C-r C-r Enter C-a C-SP C-n M-w M-g g 1 5
   Enter C-n C-n C-n C-y C-p C-f Backspace

5. C-x ] C-r - - - C-r Enter C-a C-SP C-x ] C-w
6. C-x u
7. C-x ] - - > C-r - - - C-r Enter C-a < ! - - Enter
8. C-x [ M-% < o l > Enter < O l > Enter y y y y y y y
   I found 7 instances of <ol>
9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP
   > e x e r 4 . d i f f

1.5

1. C-x d Enter + j u n k Enter
2. C-x d j u n k Enter C-x C-f h e l l o . c Enter (Paste code)
3. M-x c o m p i l e Enter Enter
4. M-! . / a . out > h e l l o - o u t Enter
5. M-! c a t SP h e l l o - o u t > > . . / k e y 1 . t x t Enter

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

1.6

1. C-x b * s c r a t c h * Enter
2. ( s e t q SP x SP ( r a n d o m ) ) C-j
3. ( s e t q SP y SP ( r a n d o m ) ) C-j Enter
   ( s e t q SP z SP ( r a n d o m ) ) C-j

4. Enter ( * SP x SP y SP z ) C-j

   I noticed that the result was about 18 digits long, which
   was also the length of each of the random numbers x, y, 
   and z; this immediately tips me off to the fact that an
   overflow occurs, and that this isn’t the correct mathematical
   result.

5. M-: ( e v a l - e x p r e s s i o n ( * SP x SP y SP z ) ) Enter

   The same result is observed as above, except we see additional
   outputs, with the erroneous result being translated and shown in 
   hexadecimal and octal notations, in addition to the decimal
   representation.

6. It can be seen that the integers generated by the processor are
   not random in the true sense, since the amount of digits it
   can handle is limited, and because a true random number can only
   be generated when a physical process is conducted that results in
   random outputs. Since numbers too large or small for the 
   processor to handle aren’t considered in generation of integers,
   and no physical processes are being carried out by the 
   processor, the “random” function here can only be said to be a 
   pseudorandom number generator.